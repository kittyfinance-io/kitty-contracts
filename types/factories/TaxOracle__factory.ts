/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TaxOracle, TaxOracleInterface } from "../TaxOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_kitty",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wavax",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
    ],
    name: "consult",
    outputs: [
      {
        internalType: "uint144",
        name: "amountOut",
        type: "uint144",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBtcbBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getKittyBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "kitty",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_kitty",
        type: "address",
      },
    ],
    name: "setKitty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    name: "setPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wavax",
        type: "address",
      },
    ],
    name: "setWavax",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wavax",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d9c380380610d9c8339818101604052606081101561003357600080fd5b5080516020820151604090920151909190600061004e6101eb565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0383166100f3576040805162461bcd60e51b815260206004820152601960248201527f6b6974747920616464726573732063616e6e6f74206265203000000000000000604482015290519081900360640190fd5b6001600160a01b03821661014e576040805162461bcd60e51b815260206004820152601960248201527f776176617820616464726573732063616e6e6f74206265203000000000000000604482015290519081900360640190fd5b6001600160a01b0381166101a9576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556101ef565b3390565b610b9e806101fe6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638187f5161161008c57806398d5fdca1161006657806398d5fdca146101d3578063994ff619146101db578063a8aa1b3114610201578063f2fde38b14610209576100cf565b80638187f5161461017f578063835c4ca6146101a55780638da5cb5b146101cb576100cf565b80630baccd75146100d4578063117be4c2146100f85780633ddac9531461010057806343dbbd3e1461015357806344604a2b1461016d578063715018a614610175575b600080fd5b6100dc61022f565b604080516001600160a01b039092168252519081900360200190f35b6100dc61023e565b61012c6004803603604081101561011657600080fd5b506001600160a01b03813516906020013561024d565b6040805171ffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61015b6103d5565b60408051918252519081900360200190f35b61015b61045a565b61017d6104ae565b005b61017d6004803603602081101561019557600080fd5b50356001600160a01b031661055a565b61017d600480360360208110156101bb57600080fd5b50356001600160a01b0316610639565b6100dc610718565b61015b610727565b61017d600480360360208110156101f157600080fd5b50356001600160a01b0316610846565b6100dc610925565b61017d6004803603602081101561021f57600080fd5b50356001600160a01b0316610934565b6001546001600160a01b031681565b6002546001600160a01b031681565b6001546000906001600160a01b038481169116146102b2576040805162461bcd60e51b815260206004820152601760248201527f746f6b656e206e6565647320746f206265206b69747479000000000000000000604482015290519081900360640190fd5b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561030657600080fd5b505afa15801561031a573d6000803e3d6000fd5b505050506040513d602081101561033057600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b15801561038857600080fd5b505afa15801561039c573d6000803e3d6000fd5b505050506040513d60208110156103b257600080fd5b505190506103ca816103c48487610a36565b90610a96565b925050505b92915050565b600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561042957600080fd5b505afa15801561043d573d6000803e3d6000fd5b505050506040513d602081101561045357600080fd5b5051905090565b600154600354604080516370a0823160e01b81526001600160a01b039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561042957600080fd5b6104b6610afd565b6001600160a01b03166104c7610718565b6001600160a01b031614610510576040805162461bcd60e51b81526020600482018190526024820152600080516020610b49833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610562610afd565b6001600160a01b0316610573610718565b6001600160a01b0316146105bc576040805162461bcd60e51b81526020600482018190526024820152600080516020610b49833981519152604482015290519081900360640190fd5b6001600160a01b038116610617576040805162461bcd60e51b815260206004820152601860248201527f7061697220616464726573732063616e6e6f7420626520300000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610641610afd565b6001600160a01b0316610652610718565b6001600160a01b03161461069b576040805162461bcd60e51b81526020600482018190526024820152600080516020610b49833981519152604482015290519081900360640190fd5b6001600160a01b0381166106f6576040805162461bcd60e51b815260206004820152601960248201527f776176617820616464726573732063616e6e6f74206265203000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b600154600354604080516370a0823160e01b81526001600160a01b0392831660048201529051600093849316916370a08231916024808301926020929190829003018186803b15801561077957600080fd5b505afa15801561078d573d6000803e3d6000fd5b505050506040513d60208110156107a357600080fd5b5051600254600354604080516370a0823160e01b81526001600160a01b039283166004820152905193945060009391909216916370a08231916024808301926020929190829003018186803b1580156107fb57600080fd5b505afa15801561080f573d6000803e3d6000fd5b505050506040513d602081101561082557600080fd5b5051905061083f816103c484670de0b6b3a7640000610a36565b9250505090565b61084e610afd565b6001600160a01b031661085f610718565b6001600160a01b0316146108a8576040805162461bcd60e51b81526020600482018190526024820152600080516020610b49833981519152604482015290519081900360640190fd5b6001600160a01b038116610903576040805162461bcd60e51b815260206004820152601960248201527f6b6974747920616464726573732063616e6e6f74206265203000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b61093c610afd565b6001600160a01b031661094d610718565b6001600160a01b031614610996576040805162461bcd60e51b81526020600482018190526024820152600080516020610b49833981519152604482015290519081900360640190fd5b6001600160a01b0381166109db5760405162461bcd60e51b8152600401808060200182810382526026815260200180610b026026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082610a45575060006103cf565b82820282848281610a5257fe5b0414610a8f5760405162461bcd60e51b8152600401808060200182810382526021815260200180610b286021913960400191505060405180910390fd5b9392505050565b6000808211610aec576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610af557fe5b049392505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220106b27c62719c6c489ff4185ad463390a4db515b123bca001da09f8949b4331d64736f6c634300060c0033";

type TaxOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TaxOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TaxOracle__factory extends ContractFactory {
  constructor(...args: TaxOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _kitty: string,
    _wavax: string,
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TaxOracle> {
    return super.deploy(
      _kitty,
      _wavax,
      _pair,
      overrides || {}
    ) as Promise<TaxOracle>;
  }
  getDeployTransaction(
    _kitty: string,
    _wavax: string,
    _pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_kitty, _wavax, _pair, overrides || {});
  }
  attach(address: string): TaxOracle {
    return super.attach(address) as TaxOracle;
  }
  connect(signer: Signer): TaxOracle__factory {
    return super.connect(signer) as TaxOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TaxOracleInterface {
    return new utils.Interface(_abi) as TaxOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TaxOracle {
    return new Contract(address, _abi, signerOrProvider) as TaxOracle;
  }
}
