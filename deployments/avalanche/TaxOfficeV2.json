{
  "address": "0x170c365Ad1D5d32DDB4126E6f36Fb68B247204F0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amtKitty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtKittyMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtEthMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHTaxFree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amtKitty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtKittyMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtTokenMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityTaxFree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableAutoCalculateTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAutoCalculateTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "excludeAddressFromTax",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "includeAddressInTax",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kitty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnThreshold",
          "type": "uint256"
        }
      ],
      "name": "setBurnThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taxCollectorAddress",
          "type": "address"
        }
      ],
      "name": "setTaxCollectorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_excluded",
          "type": "bool"
        }
      ],
      "name": "setTaxExclusionForAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxRate",
          "type": "uint256"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setTaxTiersRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setTaxTiersTwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kittyOracle",
          "type": "address"
        }
      ],
      "name": "setTaxableKittyOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "taxExclusionEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "taxFreeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator_",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTaxOffice",
          "type": "address"
        }
      ],
      "name": "transferTaxOffice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d9e45531b8fbaf36fdf02e1cc234fb40572bb2a995ad1e8771103db29d5b2d4",
  "receipt": {
    "to": null,
    "from": "0x4338F78f45F7398fB011DdFDC2BdDb8c59249383",
    "contractAddress": "0x170c365Ad1D5d32DDB4126E6f36Fb68B247204F0",
    "transactionIndex": 10,
    "gasUsed": "1725177",
    "logsBloom": "0x
    "blockHash": "0x284bf2f1db88d856b92708a8ba29ce74365dc516217ce7ff22fee1e6424e07c7",
    "transactionHash": "0x8d9e45531b8fbaf36fdf02e1cc234fb40572bb2a995ad1e8771103db29d5b2d4",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 8060011,
        "transactionHash": "0x8d9e45531b8fbaf36fdf02e1cc234fb40572bb2a995ad1e8771103db29d5b2d4",
        "address": "0x170c365Ad1D5d32DDB4126E6f36Fb68B247204F0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004338f78f45f7398fb011ddfdc2bddb8c59249383"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x284bf2f1db88d856b92708a8ba29ce74365dc516217ce7ff22fee1e6424e07c7"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 8060011,
        "transactionHash": "0x8d9e45531b8fbaf36fdf02e1cc234fb40572bb2a995ad1e8771103db29d5b2d4",
        "address": "0x170c365Ad1D5d32DDB4126E6f36Fb68B247204F0",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004338f78f45f7398fb011ddfdc2bddb8c59249383"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x284bf2f1db88d856b92708a8ba29ce74365dc516217ce7ff22fee1e6424e07c7"
      }
    ],
    "blockNumber": 8060011,
    "cumulativeGasUsed": "4121894",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d63e44ed8deab339d0eca9c31360ed01",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtKitty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtKittyMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtEthMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHTaxFree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtKitty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtKittyMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtTokenMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityTaxFree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAutoCalculateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoCalculateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"excludeAddressFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"includeAddressInTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kitty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnThreshold\",\"type\":\"uint256\"}],\"name\":\"setBurnThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxCollectorAddress\",\"type\":\"address\"}],\"name\":\"setTaxCollectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"setTaxExclusionForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTaxTiersRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTaxTiersTwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kittyOracle\",\"type\":\"address\"}],\"name\":\"setTaxableKittyOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxExclusionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"taxFreeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTaxOffice\",\"type\":\"address\"}],\"name\":\"transferTaxOffice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TaxOfficeV2.sol\":\"TaxOfficeV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TaxOfficeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./interfaces/ITaxable.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\n/*\\n __  __     __     ______   ______   __  __    \\n/\\\\ \\\\/ /    /\\\\ \\\\   /\\\\__  _\\\\ /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\   \\n\\\\ \\\\  _\\\"-.  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\  \\n \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\ \\n  \\\\/_/\\\\/_/   \\\\/_/     \\\\/_/     \\\\/_/   \\\\/_____/ \\n                                               \\n\\n*/\\ncontract TaxOfficeV2 is Operator {\\n    using SafeMath for uint256;\\n\\n    address public kitty = address(0x522348779DCb2911539e76A1042aA922F9C47Ee3);\\n    address public weth = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    address public uniRouter = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    mapping(address => bool) public taxExclusionEnabled;\\n\\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyOperator returns (bool) {\\n        return ITaxable(kitty).setTaxTiersTwap(_index, _value);\\n    }\\n\\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyOperator returns (bool) {\\n        return ITaxable(kitty).setTaxTiersRate(_index, _value);\\n    }\\n\\n    function enableAutoCalculateTax() public onlyOperator {\\n        ITaxable(kitty).enableAutoCalculateTax();\\n    }\\n\\n    function disableAutoCalculateTax() public onlyOperator {\\n        ITaxable(kitty).disableAutoCalculateTax();\\n    }\\n\\n    function setTaxRate(uint256 _taxRate) public onlyOperator {\\n        ITaxable(kitty).setTaxRate(_taxRate);\\n    }\\n\\n    function setBurnThreshold(uint256 _burnThreshold) public onlyOperator {\\n        ITaxable(kitty).setBurnThreshold(_burnThreshold);\\n    }\\n\\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyOperator {\\n        ITaxable(kitty).setTaxCollectorAddress(_taxCollectorAddress);\\n    }\\n\\n    function excludeAddressFromTax(address _address) external onlyOperator returns (bool) {\\n        return _excludeAddressFromTax(_address);\\n    }\\n\\n    function _excludeAddressFromTax(address _address) private returns (bool) {\\n        if (!ITaxable(kitty).isAddressExcluded(_address)) {\\n            return ITaxable(kitty).excludeAddress(_address);\\n        }\\n    }\\n\\n    function includeAddressInTax(address _address) external onlyOperator returns (bool) {\\n        return _includeAddressInTax(_address);\\n    }\\n\\n    function _includeAddressInTax(address _address) private returns (bool) {\\n        if (ITaxable(kitty).isAddressExcluded(_address)) {\\n            return ITaxable(kitty).includeAddress(_address);\\n        }\\n    }\\n\\n    function taxRate() external returns (uint256) {\\n        return ITaxable(kitty).taxRate();\\n    }\\n\\n    function addLiquidityTaxFree(\\n        address token,\\n        uint256 amtKitty,\\n        uint256 amtToken,\\n        uint256 amtKittyMin,\\n        uint256 amtTokenMin\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(amtKitty != 0 && amtToken != 0, \\\"amounts can't be 0\\\");\\n        _excludeAddressFromTax(msg.sender);\\n\\n        IERC20(kitty).transferFrom(msg.sender, address(this), amtKitty);\\n        IERC20(token).transferFrom(msg.sender, address(this), amtToken);\\n        _approveTokenIfNeeded(kitty, uniRouter);\\n        _approveTokenIfNeeded(token, uniRouter);\\n\\n        _includeAddressInTax(msg.sender);\\n\\n        uint256 resultAmtKitty;\\n        uint256 resultAmtToken;\\n        uint256 liquidity;\\n        (resultAmtKitty, resultAmtToken, liquidity) = IUniswapV2Router(uniRouter).addLiquidity(\\n            kitty,\\n            token,\\n            amtKitty,\\n            amtToken,\\n            amtKittyMin,\\n            amtTokenMin,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (amtKitty.sub(resultAmtKitty) > 0) {\\n            IERC20(kitty).transfer(msg.sender, amtKitty.sub(resultAmtKitty));\\n        }\\n        if (amtToken.sub(resultAmtToken) > 0) {\\n            IERC20(token).transfer(msg.sender, amtToken.sub(resultAmtToken));\\n        }\\n        return (resultAmtKitty, resultAmtToken, liquidity);\\n    }\\n\\n    function addLiquidityETHTaxFree(\\n        uint256 amtKitty,\\n        uint256 amtKittyMin,\\n        uint256 amtEthMin\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(amtKitty != 0 && msg.value != 0, \\\"amounts can't be 0\\\");\\n        _excludeAddressFromTax(msg.sender);\\n\\n        IERC20(kitty).transferFrom(msg.sender, address(this), amtKitty);\\n        _approveTokenIfNeeded(kitty, uniRouter);\\n\\n        _includeAddressInTax(msg.sender);\\n\\n        uint256 resultAmtKitty;\\n        uint256 resultAmtEth;\\n        uint256 liquidity;\\n        (resultAmtKitty, resultAmtEth, liquidity) = IUniswapV2Router(uniRouter).addLiquidityETH{value: msg.value}(\\n            kitty,\\n            amtKitty,\\n            amtKittyMin,\\n            amtEthMin,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (amtKitty.sub(resultAmtKitty) > 0) {\\n            IERC20(kitty).transfer(msg.sender, amtKitty.sub(resultAmtKitty));\\n        }\\n        return (resultAmtKitty, resultAmtEth, liquidity);\\n    }\\n\\n    function setTaxableKittyOracle(address _kittyOracle) external onlyOperator {\\n        ITaxable(kitty).setKittyOracle(_kittyOracle);\\n    }\\n\\n    function transferTaxOffice(address _newTaxOffice) external onlyOperator {\\n        ITaxable(kitty).setTaxOffice(_newTaxOffice);\\n    }\\n\\n    function taxFreeTransferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amt\\n    ) external {\\n        require(taxExclusionEnabled[msg.sender], \\\"Address not approved for tax free transfers\\\");\\n        _excludeAddressFromTax(_sender);\\n        IERC20(kitty).transferFrom(_sender, _recipient, _amt);\\n        _includeAddressInTax(_sender);\\n    }\\n\\n    function setTaxExclusionForAddress(address _address, bool _excluded) external onlyOperator {\\n        taxExclusionEnabled[_address] = _excluded;\\n    }\\n\\n    function _approveTokenIfNeeded(address _token, address _router) private {\\n        if (IERC20(_token).allowance(address(this), _router) == 0) {\\n            IERC20(_token).approve(_router, type(uint256).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeea30324dba7e1d3517d994e5b35f4c377aca34852ea48fb1a6946bfcd359c79\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/interfaces/ITaxable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITaxable {\\n    function setTaxTiersTwap(uint8 _index, uint256 _value) external returns (bool);\\n\\n    function setTaxTiersRate(uint8 _index, uint256 _value) external returns (bool);\\n\\n    function enableAutoCalculateTax() external;\\n\\n    function disableAutoCalculateTax() external;\\n\\n    function taxRate() external returns (uint256);\\n\\n    function setTaxCollectorAddress(address _taxCollectorAddress) external;\\n\\n    function setTaxRate(uint256 _taxRate) external;\\n\\n    function setBurnThreshold(uint256 _burnThreshold) external;\\n\\n    function excludeAddress(address _address) external returns (bool);\\n\\n    function isAddressExcluded(address _address) external returns (bool);\\n\\n    function includeAddress(address _address) external returns (bool);\\n\\n    function setKittyOracle(address _bombOracle) external;\\n\\n    function setTaxOffice(address _taxOffice) external;\\n}\\n\",\"keccak256\":\"0xb0d09871fbba9c6ae03b66cca29ac9fe746421d7f1b42e9bd1904b5069f07cff\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb7fffe4404cb952d5f63f825d8df6e5e2cdc61af602eadad34de85818e2a7097\",\"license\":\"MIT\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0x1ae1bc52c72e3ad2fc80f7863e454f2bff37b902fa1ad639859681369e9b82db\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b031990811673522348779dcb2911539e76a1042aa922f9c47ee31790915560038054821673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c179055600480549091167310ed43c718714eb63d5aa57b78b54704e256024e17905534801561007657600080fd5b506000610081610124565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506100d3610124565b600180546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3610128565b3390565b611c1b806101376000396000f3fe6080604052600436106101815760003560e01c80637fcd79c7116100d1578063be94f86b1161008a578063e1d8752e11610064578063e1d8752e14610528578063f1efacf91461056b578063f2fde38b146105b6578063ff87fc7c146105e957610181565b8063be94f86b14610498578063c6d69a30146104cb578063d1d31a37146104f557610181565b80637fcd79c7146103a35780638da5cb5b146103de5780639d6b5f21146103f3578063a00bc2b91461041d578063a0e47bf614610450578063b87c5a4a1461046557610181565b8063570ca7351161013e57806369356d471161011857806369356d47146102ed578063715018a61461032057806373baccc014610335578063771a3a1d1461037c57610181565b8063570ca7351461029057806365bbacd9146102a557806366206ce9146102ba57610181565b80630baccd751461018657806313762bdc146101b757806319db099d146101fe57806329605e77146102315780633fc8cef3146102665780634456eda21461027b575b600080fd5b34801561019257600080fd5b5061019b6105fe565b604080516001600160a01b039092168252519081900360200190f35b3480156101c357600080fd5b506101ea600480360360208110156101da57600080fd5b50356001600160a01b031661060d565b604080519115158252519081900360200190f35b34801561020a57600080fd5b506101ea6004803603602081101561022157600080fd5b50356001600160a01b0316610622565b34801561023d57600080fd5b506102646004803603602081101561025457600080fd5b50356001600160a01b031661067f565b005b34801561027257600080fd5b5061019b6106ff565b34801561028757600080fd5b506101ea61070e565b34801561029c57600080fd5b5061019b610734565b3480156102b157600080fd5b50610264610743565b3480156102c657600080fd5b506101ea600480360360408110156102dd57600080fd5b5060ff81351690602001356107f6565b3480156102f957600080fd5b506102646004803603602081101561031057600080fd5b50356001600160a01b03166108cc565b34801561032c57600080fd5b5061026461097e565b61035e6004803603606081101561034b57600080fd5b5080359060208101359060400135610a3c565b60408051938452602084019290925282820152519081900360600190f35b34801561038857600080fd5b50610391610cb5565b60408051918252519081900360200190f35b3480156103af57600080fd5b50610264600480360360408110156103c657600080fd5b506001600160a01b0381351690602001351515610d2c565b3480156103ea57600080fd5b5061019b610da0565b3480156103ff57600080fd5b506102646004803603602081101561041657600080fd5b5035610daf565b34801561042957600080fd5b506102646004803603602081101561044057600080fd5b50356001600160a01b0316610e45565b34801561045c57600080fd5b5061019b610edc565b34801561047157600080fd5b506101ea6004803603604081101561048857600080fd5b5060ff8135169060200135610eeb565b3480156104a457600080fd5b506101ea600480360360208110156104bb57600080fd5b50356001600160a01b0316610f8e565b3480156104d757600080fd5b50610264600480360360208110156104ee57600080fd5b5035610fe3565b34801561050157600080fd5b506102646004803603602081101561051857600080fd5b50356001600160a01b0316611079565b34801561053457600080fd5b506102646004803603606081101561054b57600080fd5b506001600160a01b03813581169160208101359091169060400135611110565b34801561057757600080fd5b5061035e600480360360a081101561058e57600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356111fc565b3480156105c257600080fd5b50610264600480360360208110156105d957600080fd5b50356001600160a01b03166115bb565b3480156105f557600080fd5b506102646116cf565b6002546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001546000906001600160a01b0316331461066e5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b61067782611768565b90505b919050565b61068761186d565b6001600160a01b0316610698610da0565b6001600160a01b0316146106f3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106fc81611871565b50565b6003546001600160a01b031681565b6001546000906001600160a01b031661072561186d565b6001600160a01b031614905090565b6001546001600160a01b031690565b6001546001600160a01b0316331461078c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b03166365bbacd96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b50505050565b6001546000906001600160a01b031633146108425760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600254604080516366206ce960e01b815260ff861660048201526024810185905290516001600160a01b03909216916366206ce9916044808201926020929091908290030181600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506040513d60208110156108c357600080fd5b50519392505050565b6001546001600160a01b031633146109155760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600254604080516369356d4760e01b81526001600160a01b038481166004830152915191909216916369356d4791602480830192600092919082900301818387803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b5050505050565b61098661186d565b6001600160a01b0316610997610da0565b6001600160a01b0316146109f2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080808515801590610a4e57503415155b610a94576040805162461bcd60e51b81526020600482015260126024820152710616d6f756e74732063616e277420626520360741b604482015290519081900360640190fd5b610a9d3361190e565b50600254604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d6020811015610b2257600080fd5b5050600254600454610b40916001600160a01b0390811691166119df565b610b4933611768565b50600480546002546040805163f305d71960e01b81526001600160a01b0392831694810194909452602484018a905260448401899052606484018890523360848501524260a48501525160009384938493169163f305d71991349160c480830192606092919082900301818588803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b50505050506040513d6060811015610bef57600080fd5b508051602082015160409092015190945090925090506000610c118a85611ae6565b1115610ca6576002546001600160a01b031663a9059cbb33610c338c87611ae6565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b505050506040513d6020811015610ca357600080fd5b50505b91989097509095509350505050565b6002546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b158015610cfb57600080fd5b505af1158015610d0f573d6000803e3d6000fd5b505050506040513d6020811015610d2557600080fd5b5051905090565b6001546001600160a01b03163314610d755760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6001546001600160a01b03163314610df85760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051639d6b5f2160e01b81526004810184905290516001600160a01b0390921691639d6b5f219160248082019260009290919082900301818387803b15801561096357600080fd5b6001546001600160a01b03163314610e8e5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b6002546040805163bc94cf4360e01b81526001600160a01b0384811660048301529151919092169163bc94cf4391602480830192600092919082900301818387803b15801561096357600080fd5b6004546001600160a01b031681565b6001546000906001600160a01b03163314610f375760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051635c3e2d2560e11b815260ff861660048201526024810185905290516001600160a01b039092169163b87c5a4a916044808201926020929091908290030181600087803b15801561089957600080fd5b6001546000906001600160a01b03163314610fda5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b6106778261190e565b6001546001600160a01b0316331461102c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051630c6d69a360e41b81526004810184905290516001600160a01b039092169163c6d69a309160248082019260009290919082900301818387803b15801561096357600080fd5b6001546001600160a01b031633146110c25760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051631f83ebb560e11b81526001600160a01b03848116600483015291519190921691633f07d76a91602480830192600092919082900301818387803b15801561096357600080fd5b3360009081526005602052604090205460ff1661115e5760405162461bcd60e51b815260040180806020018281038252602b815260200180611b6a602b913960400191505060405180910390fd5b6111678361190e565b50600254604080516323b872dd60e01b81526001600160a01b038681166004830152858116602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b505050506040513d60208110156111f057600080fd5b506107f0905083611768565b60008080861580159061120e57508515155b611254576040805162461bcd60e51b81526020600482015260126024820152710616d6f756e74732063616e277420626520360741b604482015290519081900360640190fd5b61125d3361190e565b50600254604080516323b872dd60e01b8152336004820152306024820152604481018a905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b505050506040513d60208110156112e257600080fd5b5050604080516323b872dd60e01b81523360048201523060248201526044810188905290516001600160a01b038a16916323b872dd9160648083019260209291908290030181600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d602081101561136357600080fd5b5050600254600454611381916001600160a01b0390811691166119df565b6004546113989089906001600160a01b03166119df565b6113a133611768565b50600480546002546040805162e8e33760e81b81526001600160a01b03928316948101949094528b82166024850152604484018b9052606484018a90526084840189905260a484018890523360c48501524260e48501525160009384938493169163e8e33700916101048082019260609290919082900301818787803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050506040513d606081101561145457600080fd5b5080516020820151604090920151909450909250905060006114768b85611ae6565b111561150b576002546001600160a01b031663a9059cbb336114988d87611ae6565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114de57600080fd5b505af11580156114f2573d6000803e3d6000fd5b505050506040513d602081101561150857600080fd5b50505b60006115178a84611ae6565b11156115aa576001600160a01b038b1663a9059cbb336115378c86611ae6565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561157d57600080fd5b505af1158015611591573d6000803e3d6000fd5b505050506040513d60208110156115a757600080fd5b50505b919a90995090975095505050505050565b6115c361186d565b6001600160a01b03166115d4610da0565b6001600160a01b03161461162f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166116745760405162461bcd60e51b8152600401808060200182810382526026815260200180611b446026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146117185760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663ff87fc7c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107dc57600080fd5b6002546040805163ebca1bd960e01b81526001600160a01b0384811660048301529151600093929092169163ebca1bd99160248082019260209290919082900301818787803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b505050506040513d60208110156117e457600080fd5b50511561067a57600254604080516393995d4b60e01b81526001600160a01b038581166004830152915191909216916393995d4b9160248083019260209291908290030181600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b505050506040513d602081101561186457600080fd5b5051905061067a565b3390565b6001600160a01b0381166118b65760405162461bcd60e51b815260040180806020018281038252602d815260200180611b95602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546040805163ebca1bd960e01b81526001600160a01b0384811660048301529151600093929092169163ebca1bd99160248082019260209290919082900301818787803b15801561196057600080fd5b505af1158015611974573d6000803e3d6000fd5b505050506040513d602081101561198a57600080fd5b505161067a5760025460408051631bac736760e11b81526001600160a01b03858116600483015291519190921691633758e6ce9160248083019260209291908290030181600087803b15801561183a57600080fd5b60408051636eb1769f60e11b81523060048201526001600160a01b03838116602483015291519184169163dd62ed3e91604480820192602092909190829003018186803b158015611a2f57600080fd5b505afa158015611a43573d6000803e3d6000fd5b505050506040513d6020811015611a5957600080fd5b5051611ae257816001600160a01b031663095ea7b3826000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611ab857600080fd5b505af1158015611acc573d6000803e3d6000fd5b505050506040513d60208110156107f057600080fd5b5050565b600082821115611b3d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737341646472657373206e6f7420617070726f76656420666f72207461782066726565207472616e73666572736f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f726f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72a264697066735822122033ca34b29177b343463139d7bb469aaaab94050a3654536ce125aab17b5c683d64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80637fcd79c7116100d1578063be94f86b1161008a578063e1d8752e11610064578063e1d8752e14610528578063f1efacf91461056b578063f2fde38b146105b6578063ff87fc7c146105e957610181565b8063be94f86b14610498578063c6d69a30146104cb578063d1d31a37146104f557610181565b80637fcd79c7146103a35780638da5cb5b146103de5780639d6b5f21146103f3578063a00bc2b91461041d578063a0e47bf614610450578063b87c5a4a1461046557610181565b8063570ca7351161013e57806369356d471161011857806369356d47146102ed578063715018a61461032057806373baccc014610335578063771a3a1d1461037c57610181565b8063570ca7351461029057806365bbacd9146102a557806366206ce9146102ba57610181565b80630baccd751461018657806313762bdc146101b757806319db099d146101fe57806329605e77146102315780633fc8cef3146102665780634456eda21461027b575b600080fd5b34801561019257600080fd5b5061019b6105fe565b604080516001600160a01b039092168252519081900360200190f35b3480156101c357600080fd5b506101ea600480360360208110156101da57600080fd5b50356001600160a01b031661060d565b604080519115158252519081900360200190f35b34801561020a57600080fd5b506101ea6004803603602081101561022157600080fd5b50356001600160a01b0316610622565b34801561023d57600080fd5b506102646004803603602081101561025457600080fd5b50356001600160a01b031661067f565b005b34801561027257600080fd5b5061019b6106ff565b34801561028757600080fd5b506101ea61070e565b34801561029c57600080fd5b5061019b610734565b3480156102b157600080fd5b50610264610743565b3480156102c657600080fd5b506101ea600480360360408110156102dd57600080fd5b5060ff81351690602001356107f6565b3480156102f957600080fd5b506102646004803603602081101561031057600080fd5b50356001600160a01b03166108cc565b34801561032c57600080fd5b5061026461097e565b61035e6004803603606081101561034b57600080fd5b5080359060208101359060400135610a3c565b60408051938452602084019290925282820152519081900360600190f35b34801561038857600080fd5b50610391610cb5565b60408051918252519081900360200190f35b3480156103af57600080fd5b50610264600480360360408110156103c657600080fd5b506001600160a01b0381351690602001351515610d2c565b3480156103ea57600080fd5b5061019b610da0565b3480156103ff57600080fd5b506102646004803603602081101561041657600080fd5b5035610daf565b34801561042957600080fd5b506102646004803603602081101561044057600080fd5b50356001600160a01b0316610e45565b34801561045c57600080fd5b5061019b610edc565b34801561047157600080fd5b506101ea6004803603604081101561048857600080fd5b5060ff8135169060200135610eeb565b3480156104a457600080fd5b506101ea600480360360208110156104bb57600080fd5b50356001600160a01b0316610f8e565b3480156104d757600080fd5b50610264600480360360208110156104ee57600080fd5b5035610fe3565b34801561050157600080fd5b506102646004803603602081101561051857600080fd5b50356001600160a01b0316611079565b34801561053457600080fd5b506102646004803603606081101561054b57600080fd5b506001600160a01b03813581169160208101359091169060400135611110565b34801561057757600080fd5b5061035e600480360360a081101561058e57600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356111fc565b3480156105c257600080fd5b50610264600480360360208110156105d957600080fd5b50356001600160a01b03166115bb565b3480156105f557600080fd5b506102646116cf565b6002546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001546000906001600160a01b0316331461066e5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b61067782611768565b90505b919050565b61068761186d565b6001600160a01b0316610698610da0565b6001600160a01b0316146106f3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106fc81611871565b50565b6003546001600160a01b031681565b6001546000906001600160a01b031661072561186d565b6001600160a01b031614905090565b6001546001600160a01b031690565b6001546001600160a01b0316331461078c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b03166365bbacd96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b50505050565b6001546000906001600160a01b031633146108425760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600254604080516366206ce960e01b815260ff861660048201526024810185905290516001600160a01b03909216916366206ce9916044808201926020929091908290030181600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506040513d60208110156108c357600080fd5b50519392505050565b6001546001600160a01b031633146109155760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600254604080516369356d4760e01b81526001600160a01b038481166004830152915191909216916369356d4791602480830192600092919082900301818387803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b5050505050565b61098661186d565b6001600160a01b0316610997610da0565b6001600160a01b0316146109f2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080808515801590610a4e57503415155b610a94576040805162461bcd60e51b81526020600482015260126024820152710616d6f756e74732063616e277420626520360741b604482015290519081900360640190fd5b610a9d3361190e565b50600254604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b505050506040513d6020811015610b2257600080fd5b5050600254600454610b40916001600160a01b0390811691166119df565b610b4933611768565b50600480546002546040805163f305d71960e01b81526001600160a01b0392831694810194909452602484018a905260448401899052606484018890523360848501524260a48501525160009384938493169163f305d71991349160c480830192606092919082900301818588803b158015610bc457600080fd5b505af1158015610bd8573d6000803e3d6000fd5b50505050506040513d6060811015610bef57600080fd5b508051602082015160409092015190945090925090506000610c118a85611ae6565b1115610ca6576002546001600160a01b031663a9059cbb33610c338c87611ae6565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b505050506040513d6020811015610ca357600080fd5b50505b91989097509095509350505050565b6002546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b158015610cfb57600080fd5b505af1158015610d0f573d6000803e3d6000fd5b505050506040513d6020811015610d2557600080fd5b5051905090565b6001546001600160a01b03163314610d755760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6001546001600160a01b03163314610df85760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051639d6b5f2160e01b81526004810184905290516001600160a01b0390921691639d6b5f219160248082019260009290919082900301818387803b15801561096357600080fd5b6001546001600160a01b03163314610e8e5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b6002546040805163bc94cf4360e01b81526001600160a01b0384811660048301529151919092169163bc94cf4391602480830192600092919082900301818387803b15801561096357600080fd5b6004546001600160a01b031681565b6001546000906001600160a01b03163314610f375760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051635c3e2d2560e11b815260ff861660048201526024810185905290516001600160a01b039092169163b87c5a4a916044808201926020929091908290030181600087803b15801561089957600080fd5b6001546000906001600160a01b03163314610fda5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b6106778261190e565b6001546001600160a01b0316331461102c5760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051630c6d69a360e41b81526004810184905290516001600160a01b039092169163c6d69a309160248082019260009290919082900301818387803b15801561096357600080fd5b6001546001600160a01b031633146110c25760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b60025460408051631f83ebb560e11b81526001600160a01b03848116600483015291519190921691633f07d76a91602480830192600092919082900301818387803b15801561096357600080fd5b3360009081526005602052604090205460ff1661115e5760405162461bcd60e51b815260040180806020018281038252602b815260200180611b6a602b913960400191505060405180910390fd5b6111678361190e565b50600254604080516323b872dd60e01b81526001600160a01b038681166004830152858116602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156111c657600080fd5b505af11580156111da573d6000803e3d6000fd5b505050506040513d60208110156111f057600080fd5b506107f0905083611768565b60008080861580159061120e57508515155b611254576040805162461bcd60e51b81526020600482015260126024820152710616d6f756e74732063616e277420626520360741b604482015290519081900360640190fd5b61125d3361190e565b50600254604080516323b872dd60e01b8152336004820152306024820152604481018a905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b505050506040513d60208110156112e257600080fd5b5050604080516323b872dd60e01b81523360048201523060248201526044810188905290516001600160a01b038a16916323b872dd9160648083019260209291908290030181600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d602081101561136357600080fd5b5050600254600454611381916001600160a01b0390811691166119df565b6004546113989089906001600160a01b03166119df565b6113a133611768565b50600480546002546040805162e8e33760e81b81526001600160a01b03928316948101949094528b82166024850152604484018b9052606484018a90526084840189905260a484018890523360c48501524260e48501525160009384938493169163e8e33700916101048082019260609290919082900301818787803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050506040513d606081101561145457600080fd5b5080516020820151604090920151909450909250905060006114768b85611ae6565b111561150b576002546001600160a01b031663a9059cbb336114988d87611ae6565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114de57600080fd5b505af11580156114f2573d6000803e3d6000fd5b505050506040513d602081101561150857600080fd5b50505b60006115178a84611ae6565b11156115aa576001600160a01b038b1663a9059cbb336115378c86611ae6565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561157d57600080fd5b505af1158015611591573d6000803e3d6000fd5b505050506040513d60208110156115a757600080fd5b50505b919a90995090975095505050505050565b6115c361186d565b6001600160a01b03166115d4610da0565b6001600160a01b03161461162f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166116745760405162461bcd60e51b8152600401808060200182810382526026815260200180611b446026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146117185760405162461bcd60e51b8152600401808060200182810382526024815260200180611bc26024913960400191505060405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663ff87fc7c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107dc57600080fd5b6002546040805163ebca1bd960e01b81526001600160a01b0384811660048301529151600093929092169163ebca1bd99160248082019260209290919082900301818787803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b505050506040513d60208110156117e457600080fd5b50511561067a57600254604080516393995d4b60e01b81526001600160a01b038581166004830152915191909216916393995d4b9160248083019260209291908290030181600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b505050506040513d602081101561186457600080fd5b5051905061067a565b3390565b6001600160a01b0381166118b65760405162461bcd60e51b815260040180806020018281038252602d815260200180611b95602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546040805163ebca1bd960e01b81526001600160a01b0384811660048301529151600093929092169163ebca1bd99160248082019260209290919082900301818787803b15801561196057600080fd5b505af1158015611974573d6000803e3d6000fd5b505050506040513d602081101561198a57600080fd5b505161067a5760025460408051631bac736760e11b81526001600160a01b03858116600483015291519190921691633758e6ce9160248083019260209291908290030181600087803b15801561183a57600080fd5b60408051636eb1769f60e11b81523060048201526001600160a01b03838116602483015291519184169163dd62ed3e91604480820192602092909190829003018186803b158015611a2f57600080fd5b505afa158015611a43573d6000803e3d6000fd5b505050506040513d6020811015611a5957600080fd5b5051611ae257816001600160a01b031663095ea7b3826000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611ab857600080fd5b505af1158015611acc573d6000803e3d6000fd5b505050506040513d60208110156107f057600080fd5b5050565b600082821115611b3d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737341646472657373206e6f7420617070726f76656420666f72207461782066726565207472616e73666572736f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f726f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72a264697066735822122033ca34b29177b343463139d7bb469aaaab94050a3654536ce125aab17b5c683d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/TaxOfficeV2.sol:TaxOfficeV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13437,
        "contract": "contracts/TaxOfficeV2.sol:TaxOfficeV2",
        "label": "_operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4711,
        "contract": "contracts/TaxOfficeV2.sol:TaxOfficeV2",
        "label": "kitty",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4717,
        "contract": "contracts/TaxOfficeV2.sol:TaxOfficeV2",
        "label": "weth",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4723,
        "contract": "contracts/TaxOfficeV2.sol:TaxOfficeV2",
        "label": "uniRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4727,
        "contract": "contracts/TaxOfficeV2.sol:TaxOfficeV2",
        "label": "taxExclusionEnabled",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}